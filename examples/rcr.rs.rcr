fn add(mut a, mut b) -> a {
    while b {
        inc a;
        dec b;
    }
}

fn clone(a, mut b = 0) -> b {
    let mut c;

    while a {
        unsafe dec a;
        inc b;
        inc c;
    }

    while c {
        unsafe inc a;
        dec c;
    }
}

fn mult(a, mut b, mut c = 0) -> c {
    while b {
        dec b;
        add c a;
    }
}

fn zero_all([a b c]) {
    for a in a {

    }
}

fn main() {
    let result = (mult (add 3 4) (clone (add 5 7)));
    let hello_world[] = "Hello, world!";

    for el in hello_world {
        write el;
    }
}
