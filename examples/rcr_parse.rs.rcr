fn add(mut a, mut b) -> a {
    while b {
        inc a;
        dec b;
    }
}

fn clone(a, mut b = 0) -> b {
    let mut c;

    while a {
        unsafe dec a;
        inc b;
        inc c;
    }

    while c {
        unsafe inc a;
        dec c;
    }
}

fn mult(a, mut b, mut c = 0) -> c {
    while b {
        dec b;
        add c a;
    }
}

fn zero_all(mut [a b c]) {
    for a in a {
        zero a;
    }

    fn zero(mut a) {
        while a {
            dec a;
        }
    }
}

fn twenty_three(mut [a=23]) -> a;

fn main() {
    let result = (mult (add 3 4) (clone (add 5 7)));
    let hello_world[] = "Hello, world!";

    for el in hello_world {
        write el;
    }
}

fn is_nonzero(mut a, mut output = 0) -> output {
    zero output;

    while a {
        zero a;
        inc output;
    }

    fn zero(mut a) {
        while a {
            dec a;
        }
    }
}

fn more_let_examples(
    [a b c],
    mut d,
    mut f = 23,
    mut [g h=90] = [23 78],
) {
    let a;
    let a[2];
    let a[]; // runtime error

    let mut a[] = "String";
    let a = 23;

    let mut [a b ...] = "String";
    let [a=2 b=3] = "utf-8 byte array";
    let mut [a=2 b c=3 ...] = "world";
}
