semi = _{ ";" }

uint = @{ ('0'..'9')+ ~ !ID_CONTINUE }
int  = @{ ("+" | "-")? ~ uint }

builtin = @{
    "inc"
  | "dec"
  | "read"
  | "write"
  | "goto"
  | "assert::is_zero"
  | "assert::is_unknown"
}

reserved = @{
    builtin
  | "fn"
  | "mut"
  | "for"
  | "let"
  | "while"
  | "if"
  | "else"
  | "use"
  | "pub"
  | "static"
  | "const"
  | "return"
  | "break"
  | "continue"
}

name_single = @{ !(reserved ~ (!ID_CONTINUE | "::")) ~ (ID_START ~ ID_CONTINUE*) }
name        = @{ name_single ~ ("::" ~ name_single)* }

escape_seq = @{ "\\" ~ ("\\" | "\"" | "n" | "r") }
char_dq    = @{ (!("\\" | "\"" | NEWLINE) ~ ANY) | escape_seq }

offset = @{ ("<" | ">") ~ uint? | "<"+ | ">"+ }

target_expr_one   = { "(" ~ stmt_any ~ ")" }
target_expr_block = { block_no_semi }

str       = @{ "\"" ~ char_dq* ~ "\"" }
int_array =  { "[" ~ int* ~ "]" }
literal   = _{ int | str | int_array }

target_name     =  { name }
target_array    =  { "[" ~ (target*) ~ "]" }
target_expr     =  { target_expr_one | target_expr_block }
target_relative = @{ "@" | offset }
target_inner    =  {
    target_name
  | target_array
  | int
  | str
  | target_expr
  | target_relative
}
target          =  { target_inner ~ ("." ~ uint)? }

arg = _{ target | keyword_underscore }

fn_name_inner = @{ name | "inc" | "dec" | "read" | "write" | "goto" }
fn_name       = ${ fn_name_inner ~ !ID_CONTINUE }

call_unsafe = { keyword_unsafe? }

arg_list   = { arg* }
arg_spread = { ("..." ~ target)? }

maybe_mut = { keyword_mut? }
let_mut   = { keyword_let | keyword_mut }

stmt_while = { keyword_while ~ target ~ block }
stmt_for   = { keyword_for ~ maybe_mut ~ name ~ keyword_in ~ target ~ block }
stmt_call  = { call_unsafe ~ fn_name ~ arg_list ~ arg_spread }
stmt_let   = { let_mut ~ let_bindable ~ let_init? }

let_bindable      = _{ let_dest | let_bind_standard }
let_bind_standard =  { name ~ let_array_size? }

// FEAT: maybe allow single-character strings instead of just ints here
let_dest_element       = { name ~ ("=" ~ int)? }
let_dest_maybe_element = { let_dest_element | "_" }
let_dest_els           = { let_dest_maybe_element* }
let_dest_dots          = { "..." }
let_dest               = { "[" ~ let_dest_els ~ let_dest_dots? ~ "]" }

let_array_size =  { "[" ~ uint? ~ "]" }
let_init       = _{ "=" ~ literal }

stmt_needs_semi        = _{ stmt_call | stmt_let }
stmt_no_mandatory_semi = _{ stmt_while | stmt_for }
stmt_any               = _{ stmt_needs_semi | stmt_no_mandatory_semi }
stmt_with_proper_semi  = _{ fn | (stmt_needs_semi ~ semi) | (stmt_no_mandatory_semi ~ semi?) }

stmt_list_semi    = {
    stmt_with_proper_semi*
}
stmt_list_no_semi = {
    stmt_with_proper_semi* ~ (stmt_needs_semi | stmt_no_mandatory_semi)
}

block         = _{ "{" ~ stmt_list_semi ~ "}" }
block_no_semi = _{ "{" ~ stmt_list_no_semi ~ "}" }

fn_arg_mut     = { keyword_mut? }
fn_arg         = { fn_arg_mut ~ let_bindable ~ ("=" ~ literal)? }
fn_normal_args = { fn_arg ~ ("," ~ fn_arg)* }
fn_rest        = { "..." ~ fn_arg_mut ~ name }
fn_args        = {
    "(" ~ fn_rest? ~ ")"
  | "(" ~ fn_normal_args ~ ("," ~ fn_rest?)? ~ ")"
}
fn_return      = { ("->" ~ target)? }

fn_body = _{ block | semi }
fn      =  { keyword_fn ~ name ~ fn_args ~ fn_return ~ fn_body }

main = { SOI ~ fn* ~ EOI }

keyword_mut        = @{ "mut" ~ !ID_CONTINUE }
keyword_let        = @{ "let" ~ !ID_CONTINUE }
keyword_fn         = @{ "fn" ~ !ID_CONTINUE }
keyword_while      = @{ "while" ~ !ID_CONTINUE }
keyword_for        = @{ "for" ~ !ID_CONTINUE }
keyword_in         = @{ "in" ~ !ID_CONTINUE }
keyword_unsafe     = @{ "unsafe" ~ !ID_CONTINUE }
keyword_underscore = @{ "_" ~ !ID_CONTINUE }

WHITESPACE = _{ " " | "\t" | NEWLINE }

COMMENT = _{
    ("//" ~ ((!NEWLINE ~ ANY)+))
  | ("/*" ~ (!"*/" ~ ANY)* ~ "*/")
}
