semi = _{ ";" }

uint = @{ ('0'..'9')+ ~ !ID_CONTINUE }
int  = @{ ("+" | "-")? ~ uint }

builtin = @{
    "inc"
  | "dec"
  | "read"
  | "write"
  | "goto"
  | "assert::is_zero"
  | "assert::is_unknown"
}

reserved = @{
    builtin
  | "fn"
  | "mut"
  | "for"
  | "let"
  | "while"
  | "exitable"
  | "exit"
}

name_single = @{ !(reserved ~ (!ID_CONTINUE | "::")) ~ (ID_START ~ ID_CONTINUE*) }
name        = @{ name_single ~ ("::" ~ name_single)* }

escape_seq = @{ "\\" ~ ("\\" | "\"" | "n" | "r") }
char_dq    = @{ (!("\\" | "\"" | NEWLINE) ~ ANY) | escape_seq }

offset = @{ ("<" | ">") ~ uint? }

target_name     =  { name }
target_array    =  { "[" ~ (target*) ~ "]" }
target_lit_int  =  { int }
target_lit_str  = @{ "\"" ~ char_dq* ~ "\"" }
target_expr     =  { "(" ~ stmt_list_no_semi ~ ")" }
target_relative = @{ "@" ~ offset? }
target_inner    =  {
    target_name
  | target_array
  | target_lit_int
  | target_lit_str
  | target_expr
  | target_relative
}
target          =  { target_inner ~ ("." ~ uint)? }

arg = _{ target | keyword_underscore }

fn_name_inner = @{ name | "inc" | "dec" | "read" | "write" | "goto" }
fn_name       = ${ fn_name_inner ~ !ID_CONTINUE }

call_unsafe = { keyword_unsafe? }

arg_list   = { arg* }
arg_spread = { ("..." ~ target)? }

let_mut = { keyword_mut? }

stmt_while     = { keyword_while ~ target ~ block }
stmt_for      = { keyword_for ~ name ~ keyword_in ~ target ~ block }
stmt_breakable = { keyword_breakable ~ target? ~ block }
stmt_break     = { keyword_break }
stmt_call      = { call_unsafe ~ fn_name ~ arg_list ~ arg_spread }
stmt_let       = { keyword_let ~ let_mut ~ let_bindable ~ let_init? }

let_bindable      = _{ let_dest | let_bind_standard }
let_bind_standard =  { name ~ let_array_size? }

let_dest_element       = { name ~ ("=" ~ target)? }
let_dest_maybe_element = { let_dest_element | "_" }
let_dest_els           = { let_dest_maybe_element* }
let_dest_dots          = { "..." }
let_dest               = { "[" ~ let_dest_els ~ let_dest_dots? ~ "]" }

let_array_size =  { "[" ~ uint? ~ "]" }
let_init       = _{ "=" ~ target }

stmt_needs_semi        = _{ stmt_break | stmt_call | stmt_let }
stmt_no_mandatory_semi = _{ stmt_while | stmt_for | stmt_breakable }

stmt_list_semi    = {
    ((stmt_needs_semi ~ semi) | (stmt_no_mandatory_semi ~ semi?))*
}
stmt_list_no_semi = {
    ((stmt_needs_semi ~ semi) | (stmt_no_mandatory_semi ~ semi?))* ~ (stmt_needs_semi | stmt_no_mandatory_semi)
}

block = _{ "{" ~ stmt_list_semi ~ "}" }

fn_arg_mut     = { keyword_mut? }
fn_arg         = { fn_arg_mut ~ let_bindable ~ ("=" ~ target)? }
fn_normal_args = { fn_arg ~ ("," ~ fn_arg)* }
fn_rest        = { "..." ~ fn_arg_mut ~ name }
fn_args     = {
    "(" ~ fn_rest? ~ ")"
  | "(" ~ fn_normal_args ~ ("," ~ fn_rest?)? ~ ")"
}
fn_return = { ("->" ~ target)? }

fn_body = _{ block | semi }
fn      = { keyword_fn ~ name ~ fn_args ~ fn_return ~ fn_body }

main = { SOI ~ fn* ~ EOI }

keyword_mut        = @{ "mut" ~ !ID_CONTINUE }
keyword_let        = @{ "let" ~ !ID_CONTINUE }
keyword_fn         = @{ "fn" ~ !ID_CONTINUE }
keyword_while      = @{ "while" ~ !ID_CONTINUE }
keyword_for       = @{ "for" ~ !ID_CONTINUE }
keyword_breakable  = @{ "breakable" ~ !ID_CONTINUE }
keyword_break      = @{ "break" ~ !ID_CONTINUE }
keyword_in         = @{ "in" ~ !ID_CONTINUE }
keyword_unsafe     = @{ "unsafe" ~ !ID_CONTINUE }
keyword_underscore = @{ "_" ~ !ID_CONTINUE }

WHITESPACE = _{ " " | "\t" | NEWLINE }

COMMENT = _{
    ("//" ~ ((!NEWLINE ~ ANY)+))
  | ("/*" ~ (!"*/" ~ ANY)* ~ "*/")
}
